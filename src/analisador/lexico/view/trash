 Pattern pattern = Pattern.compile("\\b(if|then|else|begin|end|program|var|integer|String|return)\\b|:=|:|[;()\\s]|\\b[a-zA-Z]+\\b|\\d+|>");

while (model.getRowCount() > 0) {
			model.removeRow(0);
		}
 Matcher matcher = pattern.matcher(textArea.getText());

ArrayList<String> tokens = new ArrayList<>();

while (matcher.find()) {
    tokens.add(matcher.group());
}

       
  for (int i = 0; i <tokens.size(); i++) {
            String elemento = tokens.get(i); 
            if (elemento.trim().isEmpty()) { // Verifica se a string não consiste apenas de espaços em branco
              
                tokens.remove(i); // Adiciona o elemento de volta à fila
            }
        }
  
 System.out.println(tokens.toString());
while (!tokens.isEmpty()) {
    String currentToken = tokens.getFirst(); 

    Token t = new Token();
    ArrayList<String> aritmeticos = new ArrayList<>(Arrays.asList(t.aritmeticos));
    ArrayList<String> primitivos = new ArrayList<>(Arrays.asList(t.tiposPrimitivos));
    ArrayList<String> comparacao = new ArrayList<>(Arrays.asList(t.comparacao));
    ArrayList<String> delimitadores = new ArrayList<>(Arrays.asList(t.delimitadores));
    ArrayList<String> palavras_Reservadas = new ArrayList<>(Arrays.asList(t.palavras_Reservadas));

    if (aritmeticos.contains(currentToken)) {
        model.addRow(new Object[]{
               pull(tokens), "Operador Aritmético"
        });
    } else if (primitivos.contains(currentToken)) {
        model.addRow(new Object[]{
              pull(tokens), "Tipos Primitivos"
        });
    } else if (comparacao.contains(currentToken)) {
        model.addRow(new Object[]{
               pull(tokens), "Operadores de Comparação"
        });
    } else if (delimitadores.contains(currentToken)) {
        model.addRow(new Object[]{
               pull(tokens), "Delimitador"
        });
    } 
     else if (palavras_Reservadas.contains(currentToken)) {
        model.addRow(new Object[]{
               pull(tokens), "palavras_Reservadas"
        });
    } 
    
    else{
      
       if(isValidateConstant(currentToken)){
       
        model.addRow(new Object[]{
              pull(tokens), "Variavel/Identificador"
        });
       }else{
         int i =  JOptionPane.showConfirmDialog(rootPane, "Erro de Lexicp", "Erro De Analise", JOptionPane.ERROR_MESSAGE);
          if(i==0){
          System.exit(0);}
       }
        
        
    }
}


public static boolean isValidateConstant(String input) {
        // Define as expressões regulares para validar a entrada
        String constantIdentifierRegex = "[a-zA-Z][a-zA-Z0-9]*";
        String integerConstantRegex = "[0-9]+";
        String characterConstantRegex = "'[a-zA-Z0-9]'|''[a-zA-Z0-9]+''";

        // Verifica se a entrada corresponde a uma das formas válidas de constantes
        if (input.matches(constantIdentifierRegex) ||
            input.matches(integerConstantRegex) ||
            input.matches(characterConstantRegex)) {
            return true;
        }

        return false;
    }  


  
     public static String pull(ArrayList<String> a ){
    String ret = a.getFirst();
      a.removeFirst();
      return ret;
    }