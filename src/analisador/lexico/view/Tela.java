/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package analisador.lexico.view;

import com.formdev.flatlaf.FlatLaf;
import com.formdev.flatlaf.extras.FlatAnimatedLafChange;
import com.formdev.flatlaf.themes.FlatMacDarkLaf;
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import com.formdev.flatlaf.ui.FlatLineBorder;
import jnafilechooser.api.JnaFileChooser;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.HeadlessException;
import java.awt.Insets;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import static javax.management.Query.or;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;
import pedro.glasspanepopup.GlassPanePopup;

/**
 *
 * @author Pedro
 */
public class Tela extends javax.swing.JFrame {

    /**
     * Creates new form Tela
     */
    JnaFileChooser jnaCh;
    DefaultTableModel model;
    
    boolean erro = false;
    HashMap<Integer, ArrayList<String>> erros = new HashMap<>();
    

    public Tela() {
        initComponents()
                ;
        
        txErro.setVisible(false);
        btError.setVisible(false);
        model = new DefaultTableModel();
        tabela.setModel(model);
         GlassPanePopup.install(this);
        model.addColumn("Token");
        model.addColumn("classificacao");
        model.addColumn("linha");

        TextLineNumber tln = new TextLineNumber(textArea);
        sPane.setRowHeaderView(tln);
        jnaCh = new JnaFileChooser();
        
        time.setBorder(new FlatLineBorder(new Insets(1, 1, 1, 1), new Color(192, 130, 12)));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        txErro = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        sPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        claro = new javax.swing.JToggleButton();
        btError = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        time = new javax.swing.JLabel();
        b3 = new javax.swing.JLabel();
        clock1 = new com.pedro.clock.Clock();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Analizador Lexico");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Roboto Medium", 0, 18)); // NOI18N
        jLabel1.setText("Introduza seu codigo Pascal aqui");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 266, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 62, Short.MAX_VALUE)
        );

        jButton1.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        jButton1.setText("Testar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jLabel2.setFont(new java.awt.Font("Roboto Medium", 0, 18)); // NOI18N
        jLabel2.setText("OutPut :");

        tabela.setFont(new java.awt.Font("Roboto Light", 0, 12)); // NOI18N
        jScrollPane1.setViewportView(tabela);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 884, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton2.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        jButton2.setText("editor");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        jButton3.setText("file");

        jLabel4.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        jLabel4.setText("Adicionar ficheiro (.pas)");

        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        txErro.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        txErro.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txErro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/analisador/lexico/view/erros.png"))); // NOI18N

        textArea.setColumns(20);
        textArea.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        textArea.setRows(5);
        textArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textAreaKeyReleased(evt);
            }
        });
        sPane.setViewportView(textArea);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sPane)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(sPane, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        claro.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        claro.setText("Modo Claro");
        claro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                claroActionPerformed(evt);
            }
        });

        btError.setFont(new java.awt.Font("Roboto Medium", 0, 18)); // NOI18N
        btError.setText("Ver os Erros");
        btError.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btErrorActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        jLabel3.setText("Tempo de Execucao");

        time.setFont(new java.awt.Font("Roboto Medium", 0, 24)); // NOI18N
        time.setText("00");

        b3.setFont(new java.awt.Font("Roboto Medium", 0, 18)); // NOI18N
        b3.setText("s");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(clock1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(time, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(b3))))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel4)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jButton3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton2)))
                                        .addGap(14, 14, 14)
                                        .addComponent(jButton4))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(38, 38, 38)
                                        .addComponent(btError, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(47, 47, 47)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 9, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(txErro, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(44, 44, 44)
                        .addComponent(jButton1)
                        .addGap(159, 159, 159)
                        .addComponent(claro)
                        .addGap(24, 24, 24))
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(claro)
                                .addComponent(jButton2)
                                .addComponent(jButton3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addComponent(clock1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txErro, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btError, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(time)
                                .addComponent(b3))
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
//        boolean save =
        jnaCh.showOpenDialog(this);
        lerArquivoTexto(jnaCh.getSelectedFile().getPath());
//        txErro.setText();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

          long startTime = System.nanoTime();
        erro= false;
 btError.setVisible(erro);
        txErro.setVisible(erro);
        erros.clear();
//        int caretPosition = textArea.getCaretPosition(); // Obter a posição do cursor
//            try {
//                int linha = textArea.getLineOfOffset(caretPosition); // Obter o número da linha
//                int inicioLinha = textArea.getLineStartOffset(linha); // Obter o início da linha
//                int fimLinha = textArea.getLineEndOffset(linha); // Obter o fim da linha
//                String linhaSelecionada = textArea.getText().substring(inicioLinha, fimLinha); // Obter o texto da linha
//                 System.out.println( "linha "+linha+" "+ linhaSelecionada);
//            } catch (Exception ex) {
//                ex.printStackTrace();
//            }
//StringTokenizer tokenizer = new StringTokenizer(textArea.getText());
        int size = textArea.getLineCount();
        ArrayList<String> linhas = new ArrayList<String>();
        for (int i = 0; i < size; i++) {

            try {
                int inicioLinha = textArea.getLineStartOffset(i); // Obter o início da linha
                int fimLinha = textArea.getLineEndOffset(i); // Obter o fim da linha
                linhas.add(textArea.getText().substring(inicioLinha, fimLinha));

            } catch (BadLocationException e) {
                e.getMessage();
            }
        }

        HashMap<Integer, ArrayList<String>> tokens = new HashMap<>();

        agrupar(tokens, linhas);
        System.out.println(tokens.toString());
        preencherTabela(tokens);

//        erros(tokens, erros);
        if(erro){
        btError.setVisible(erro);
        txErro.setVisible(erro);}
        long endTime = System.nanoTime();
        double duration = (endTime - startTime) / 1e9;
 DecimalFormat df = new DecimalFormat("#.##");
        
        // Formata o número
        String numeroFormatado = df.format(duration);
time.setText(numeroFormatado);
    }//GEN-LAST:event_jButton1ActionPerformed

    //===================================METODOS ESPECIAIS======================
    void preencherTabela(HashMap<Integer, ArrayList<String>> map) {
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }

        Token t = new Token();
        ArrayList<String> aritmeticos = new ArrayList<>(Arrays.asList(t.aritmeticos));
        ArrayList<String> primitivos = new ArrayList<>(Arrays.asList(t.tiposPrimitivos));
        ArrayList<String> comparacao = new ArrayList<>(Arrays.asList(t.comparacao));
        ArrayList<String> delimitadores = new ArrayList<>(Arrays.asList(t.delimitadores));
        ArrayList<String> palavras_Reservadas = new ArrayList<>(Arrays.asList(t.palavras_Reservadas));

        for (Map.Entry<Integer, ArrayList<String>> entry : map.entrySet()) {
            Object key = entry.getKey();
            ArrayList<String> val = entry.getValue();

            try {
                for (String o : val) {
                    Boolean bol = isNumeric(o);
                    
                    if(bol){
                        model.addRow(new Object[]{
                            o, "Numero", key
                        });
                    }else
                    if (aritmeticos.contains(o)) {
                        model.addRow(new Object[]{
                            o, "Operador Aritmético", key
                        });
                    } 
                    if (o.isEmpty()) {
                       
                    } 
                    
                    else if (primitivos.contains(o)) {
                        model.addRow(new Object[]{
                            o, "Tipos Primitivos", key
                        });
                    } else if (comparacao.contains(o)) {
                        model.addRow(new Object[]{
                            o, "Operadores de Comparação", key
                        });
                    } else if (delimitadores.contains(o)) {
                        model.addRow(new Object[]{
                            o, "Delimitador", key
                        
                        });
                    } else if (palavras_Reservadas.contains(o)) {
                        model.addRow(new Object[]{
                            o, "palavras_Reservadas", key
                        });
                    } else if(o.length()>1&&(o.contains("(")&&o.contains(")"))){
                    if (o.charAt(0) == '(' && o.charAt(o.length() - 1) == ')') {
                        model.addRow(new Object[]{
                            o, "<Condicao>", key
                        });}
                    }else {
                        
                        if(!isIdentificador(o)){
                        model.addRow(new Object[]{
                            o, "Variavel/Identificador", key
                        });}
                        
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

        }
        
       

    }
      
//    boolean isNumeber(String o,int i,Boolean b ){
//        if(i==o.length()) return b;
//      char c = 'r';
//      c.
//    
//    return true;
//    }
    
    void estaContido(ArrayList<String> s, String str){
     if(
        !(espalhar("+", s, str)||
        espalhar("-", s, str)||
        espalhar("*", s, str)||
        espalhar("/", s, str)||
        espalhar2("<=", s, str)||
//        espalhar2(",", s, str)||
        espalhar2(">=", s, str)||
        espalhar2(":=", s, str)||
        espalhar("=", s, str)||
        espalhar(":", s, str)||
        espalhar2("<>", s, str)||
//        espalhar("<", s, str)||
//        espalhar(">", s, str)||
//        espalhar("(", s, str)||
//        espalhar(")", s, str)||
        espalhar(";", s, str)))
             {
     s.add(str);
     }
        
    }
    
    
      private void lerArquivoTexto(String caminhoArquivo) {
        try {
            BufferedReader reader = new BufferedReader(new FileReader(caminhoArquivo));
            StringBuilder conteudoArquivo = new StringBuilder();
            String linha;

            while ((linha = reader.readLine()) != null) {
                conteudoArquivo.append(linha).append("\n");
            }

            reader.close();

            // Define o conteúdo do JTextArea como o conteúdo do arquivo
            textArea.setText(conteudoArquivo.toString());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    boolean espalhar(String elem,ArrayList<String> s, String str){
        try {
            if (str.contains(elem) && str.length() > 1) {
                s.add(elem);
                int pos = str.indexOf(elem);
                s.add(str.substring(0, pos));
                s.add(str.substring(pos + 1));
                System.out.println(str+" "+str.substring(pos + 1));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
         return str.contains(elem)&& str.length()>1;
    }
    boolean espalhar2(String elem,ArrayList<String> s, String str){
         if(str.contains(elem)&& str.length()>1){
       s.add(elem);
       int pos = str.indexOf(elem);
        s.add(str.substring(0, pos));
        s.add(str.substring( pos+2));
      }
         return str.contains(elem)&& str.length()>1;
    }
    
    
    public static boolean isNumeric(String str) {
        if (str == null || str.isEmpty()) {
            return false;
        }
    
        for (char c : str.toCharArray()) {
            if (!Character.isDigit(c)) {
                return false;
            }
        }
        return true;
    }
    
//    void erros(HashMap<Integer, ArrayList<String>> tokens,HashMap<Integer, ArrayList<String>> erros){
//        haErros(tokens, erros, "program");
//        haErros(tokens, erros, "begin");
//        haErros(tokens, erros, "end.");
//        haErros(tokens, erros, "var");
//        haErros(tokens, erros, "program");
////        haErros(tokens, erros, "readln");
//        haErros(tokens, erros, "integer");
//        haErros(tokens, erros, "boolean");
//        haErros(tokens, erros, "while");
//        haErros(tokens, erros, "if");
//        haErros(tokens, erros, "then");
////        haErros(tokens, erros, "");
//    }
    void haErros(HashMap<Integer, ArrayList<String>> tokens,HashMap<Integer, ArrayList<String>> erros){
     for (Map.Entry<Integer, ArrayList<String>> entry : tokens.entrySet()) {
            int key = entry.getKey();
            ArrayList<String> val = entry.getValue();
            for (String str : val) {         
                 if(!isIdentificador(str)) { erros.put(key, val); erro = true;} 
            }} 
    }
    void ifs(ArrayList<String> s, String str) {
        String sb1 = str.substring(0, 2);
        String iff = str.substring(2, str.length());

        s.add(iff);
        s.add(sb1);

    }

    void whiles(ArrayList<String> s, String str) {
        String sb1 = str.substring(0, 5);
        String iff = str.substring(5, str.length());

        s.add(iff);
        s.add(sb1);

    }

    void agrupar(HashMap<Integer, ArrayList<String>> tokens, ArrayList<String> linhas) {
        int i = 1;
        for (String linha : linhas) {

            tokens.put(i, tokenizar(linha, i));
            i++;

        }
    }

    ArrayList<String> tokenizar(String s, int i) {
        ArrayList<String> ss = new ArrayList<>();
        StringTokenizer tk = new StringTokenizer(s);
        try {
            while (tk.hasMoreTokens()) {
                String current = tk.nextToken();
                if(isIdentificador(current)){
                                           erro=true;
                                           ArrayList<String> sa = new ArrayList<>();
                           sa.add(current);
                            erros.put(i, sa);
                }
                if (current.length() > 2) {
                    if (current.substring(0, 2).equalsIgnoreCase("if")) {

                        if (!((current.charAt(2) == '(') && (current.charAt(current.length() - 1) == ')'))) {
                           ArrayList<String> sa = new ArrayList<>();
                           sa.add(current);                    
//                           erro=true;
//                            erros.put(i, sa);
                        } else {
                            ifs(ss, current);
                        }
                    } else if (current.length() > 4) {
                        if (current.substring(0, 5).equalsIgnoreCase("WHILE")) {
                            if ((current.charAt(5) == '(') && (current.charAt(current.length() - 1) == ')')) {
                                whiles(ss, current);
                            }
                        } else {
                           //ss.add(current);
                            estaContido(ss, current);
                        }

                    } else {
                       // ss.add(current);
                        estaContido(ss, current);
                    }

                } else if (current.length() > 4) {
                    if (current.substring(0, 5).equalsIgnoreCase("WHILE")) {
                        if ((current.charAt(5) == '(') && (current.charAt(current.length() - 1) == ')')) {
                            whiles(ss, current);
                        }else{
                        ArrayList<String> sas = new ArrayList<>();
                           sas.add(current);
//                           erro=true;
//                            erros.put(i, sas);
                        }
                    } else {
                      //  ss.add(current);
                       estaContido(ss, current);
                    }
                } else {
                   // ss.add(current);
                    estaContido(ss, current);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro Lexico ns linha " + i, s, JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
//        haErros(erros, erros);
        return ss;

    }

    //==========================================================================

    private void claroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_claroActionPerformed
        if (claro.isSelected()) {

            EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    FlatAnimatedLafChange.showSnapshot();
                    FlatMacLightLaf.setup();
                    FlatLaf.updateUI();
                    FlatAnimatedLafChange.hideSnapshotWithAnimation();

                }
            });
            claro.setText("Modo Escuro");
        } else {

            claro.setText("Modo Claro");
            EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    FlatAnimatedLafChange.showSnapshot();
                    FlatMacDarkLaf.setup();
                    FlatLaf.updateUI();
                    FlatAnimatedLafChange.hideSnapshotWithAnimation();

                }
            });
        }
    }//GEN-LAST:event_claroActionPerformed

    private void btErrorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btErrorActionPerformed
      GlassPanePopup.showPopup(new popUpErros(erros));
    }//GEN-LAST:event_btErrorActionPerformed

    private void textAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAreaKeyReleased

          long startTime = System.nanoTime();
        erro= false;
 btError.setVisible(erro);
        txErro.setVisible(erro);
        erros.clear();
//        int caretPosition = textArea.getCaretPosition(); // Obter a posição do cursor
//            try {
//                int linha = textArea.getLineOfOffset(caretPosition); // Obter o número da linha
//                int inicioLinha = textArea.getLineStartOffset(linha); // Obter o início da linha
//                int fimLinha = textArea.getLineEndOffset(linha); // Obter o fim da linha
//                String linhaSelecionada = textArea.getText().substring(inicioLinha, fimLinha); // Obter o texto da linha
//                 System.out.println( "linha "+linha+" "+ linhaSelecionada);
//            } catch (Exception ex) {
//                ex.printStackTrace();
//            }
//StringTokenizer tokenizer = new StringTokenizer(textArea.getText());
        int size = textArea.getLineCount();
        ArrayList<String> linhas = new ArrayList<String>();
        for (int i = 0; i < size; i++) {

            try {
                int inicioLinha = textArea.getLineStartOffset(i); // Obter o início da linha
                int fimLinha = textArea.getLineEndOffset(i); // Obter o fim da linha
                linhas.add(textArea.getText().substring(inicioLinha, fimLinha));

            } catch (BadLocationException e) {
                e.getMessage();
            }
        }

        HashMap<Integer, ArrayList<String>> tokens = new HashMap<>();

        agrupar(tokens, linhas);
        System.out.println(tokens.toString());
        preencherTabela(tokens);

//        erros(tokens, erros);
        if(erro){
        btError.setVisible(erro);
        txErro.setVisible(erro);}
        long endTime = System.nanoTime();
        double duration = (endTime - startTime) / 1e9;
 DecimalFormat df = new DecimalFormat("#.##");
        
        // Formata o número
        String numeroFormatado = df.format(duration);
time.setText(numeroFormatado);
    }//GEN-LAST:event_textAreaKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new FlatMacDarkLaf().setup();
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tela().setVisible(true);
            }
        });
    }
    
    
    
    //===============Metodo_Atualizado
    public static boolean isIdentificador(String val){
        boolean identificador = true;
        identificador = !Character.isLetter(val.charAt(0));
        
        for (StringTokenizer stringTokenizer = new StringTokenizer(val.substring(1)); stringTokenizer.hasMoreTokens();) {
            char[] token = stringTokenizer.nextToken().toCharArray();
            for (char c : token) {
              if(  !Character.isLetter(c) && !Character.isDigit(c)) identificador = false;
            }
            
        }
        return identificador;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel b3;
    private javax.swing.JButton btError;
    private javax.swing.JToggleButton claro;
    private com.pedro.clock.Clock clock1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane sPane;
    private javax.swing.JTable tabela;
    private javax.swing.JTextArea textArea;
    private javax.swing.JLabel time;
    private javax.swing.JLabel txErro;
    // End of variables declaration//GEN-END:variables
}
